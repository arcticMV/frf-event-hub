rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() &&
        request.auth.token.admin == true;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() &&
        request.auth.uid == userId;
    }

    // Events collection rules
    match /events/{eventId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() &&
        (resource.data.createdBy == request.auth.uid || isAdmin());
      allow delete: if isAdmin();

      // Event registrations subcollection
      match /registrations/{registrationId} {
        allow read: if isAuthenticated() &&
          (resource.data.userId == request.auth.uid || isAdmin());
        allow create: if isAuthenticated() &&
          request.resource.data.userId == request.auth.uid;
        allow update: if isAuthenticated() &&
          (resource.data.userId == request.auth.uid || isAdmin());
        allow delete: if isAdmin();
      }
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) || isAdmin();
    }

    // Registrations collection rules
    match /registrations/{registrationId} {
      allow read: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAdmin();
    }
  }
}